// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "customer.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Customer } from "./customer";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { cofResponse } from "./customer";
import type { cofRequest } from "./customer";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Customer
 */
export interface ICustomerClient {
    /**
     * @generated from protobuf rpc: CustomerOfEntity(cofRequest) returns (cofResponse);
     */
    customerOfEntity(input: cofRequest, options?: RpcOptions): UnaryCall<cofRequest, cofResponse>;
}
/**
 * @generated from protobuf service Customer
 */
export class CustomerClient implements ICustomerClient, ServiceInfo {
    typeName = Customer.typeName;
    methods = Customer.methods;
    options = Customer.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CustomerOfEntity(cofRequest) returns (cofResponse);
     */
    customerOfEntity(input: cofRequest, options?: RpcOptions): UnaryCall<cofRequest, cofResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<cofRequest, cofResponse>("unary", this._transport, method, opt, input);
    }
}
