// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "customer.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message cofRequest
 */
export interface cofRequest {
    /**
     * @generated from protobuf field: optional int32 en_id = 1;
     */
    enId?: number;
    /**
     * @generated from protobuf field: optional string active = 2;
     */
    active?: string;
}
/**
 * @generated from protobuf message cofResponse
 */
export interface cofResponse {
    /**
     * @generated from protobuf field: repeated CustomerType data = 1;
     */
    data: CustomerType[];
}
/**
 * @generated from protobuf message CustomerType
 */
export interface CustomerType {
    /**
     * @generated from protobuf field: int32 ptnr_id = 1;
     */
    ptnrId: number;
    /**
     * @generated from protobuf field: string ptnr_code = 2;
     */
    ptnrCode: string;
    /**
     * @generated from protobuf field: string ptnr_name = 3;
     */
    ptnrName: string;
    /**
     * @generated from protobuf field: int32 ptnr_en_id = 4;
     */
    ptnrEnId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class cofRequest$Type extends MessageType<cofRequest> {
    constructor() {
        super("cofRequest", [
            { no: 1, name: "en_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "active", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<cofRequest>): cofRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<cofRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: cofRequest): cofRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 en_id */ 1:
                    message.enId = reader.int32();
                    break;
                case /* optional string active */ 2:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: cofRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 en_id = 1; */
        if (message.enId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.enId);
        /* optional string active = 2; */
        if (message.active !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cofRequest
 */
export const cofRequest = new cofRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class cofResponse$Type extends MessageType<cofResponse> {
    constructor() {
        super("cofResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerType }
        ]);
    }
    create(value?: PartialMessage<cofResponse>): cofResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<cofResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: cofResponse): cofResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CustomerType data */ 1:
                    message.data.push(CustomerType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: cofResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CustomerType data = 1; */
        for (let i = 0; i < message.data.length; i++)
            CustomerType.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cofResponse
 */
export const cofResponse = new cofResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerType$Type extends MessageType<CustomerType> {
    constructor() {
        super("CustomerType", [
            { no: 1, name: "ptnr_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ptnr_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ptnr_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ptnr_en_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerType>): CustomerType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ptnrId = 0;
        message.ptnrCode = "";
        message.ptnrName = "";
        message.ptnrEnId = 0;
        if (value !== undefined)
            reflectionMergePartial<CustomerType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerType): CustomerType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ptnr_id */ 1:
                    message.ptnrId = reader.int32();
                    break;
                case /* string ptnr_code */ 2:
                    message.ptnrCode = reader.string();
                    break;
                case /* string ptnr_name */ 3:
                    message.ptnrName = reader.string();
                    break;
                case /* int32 ptnr_en_id */ 4:
                    message.ptnrEnId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ptnr_id = 1; */
        if (message.ptnrId !== 0)
            writer.tag(1, WireType.Varint).int32(message.ptnrId);
        /* string ptnr_code = 2; */
        if (message.ptnrCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ptnrCode);
        /* string ptnr_name = 3; */
        if (message.ptnrName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ptnrName);
        /* int32 ptnr_en_id = 4; */
        if (message.ptnrEnId !== 0)
            writer.tag(4, WireType.Varint).int32(message.ptnrEnId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerType
 */
export const CustomerType = new CustomerType$Type();
/**
 * @generated ServiceType for protobuf service Customer
 */
export const Customer = new ServiceType("Customer", [
    { name: "CustomerOfEntity", options: {}, I: cofRequest, O: cofResponse }
]);
