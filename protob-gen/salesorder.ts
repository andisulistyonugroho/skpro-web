// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "salesorder.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GpRequest
 */
export interface GpRequest {
    /**
     * @generated from protobuf field: optional int32 en_id = 1;
     */
    enId?: number;
}
/**
 * @generated from protobuf message GpResponse
 */
export interface GpResponse {
    /**
     * @generated from protobuf field: repeated PricelistType data = 1;
     */
    data: PricelistType[];
}
/**
 * @generated from protobuf message PricelistType
 */
export interface PricelistType {
    /**
     * @generated from protobuf field: int32 pi_id = 1;
     */
    piId: number;
    /**
     * @generated from protobuf field: int32 en_id = 2;
     */
    enId: number;
    /**
     * @generated from protobuf field: string pi_code = 3;
     */
    piCode: string;
    /**
     * @generated from protobuf field: string pi_desc = 4;
     */
    piDesc: string;
    /**
     * @generated from protobuf field: string pi_start_date = 5;
     */
    piStartDate: string;
    /**
     * @generated from protobuf field: string pi_end_date = 6;
     */
    piEndDate: string;
    /**
     * @generated from protobuf field: string pi_active = 7;
     */
    piActive: string;
    /**
     * @generated from protobuf field: int32 area_id = 8;
     */
    areaId: number;
    /**
     * @generated from protobuf field: string pi_oid = 9;
     */
    piOid: string;
}
/**
 * @generated from protobuf message GpdRequest
 */
export interface GpdRequest {
    /**
     * @generated from protobuf field: string pi_oid = 1;
     */
    piOid: string;
    /**
     * @generated from protobuf field: int32 en_id = 2;
     */
    enId: number;
    /**
     * @generated from protobuf field: int32 payment_type = 3;
     */
    paymentType: number;
    /**
     * @generated from protobuf field: int32 area_id = 4;
     */
    areaId: number;
}
/**
 * @generated from protobuf message GpdResponse
 */
export interface GpdResponse {
    /**
     * @generated from protobuf field: repeated PricelistDetail data = 1;
     */
    data: PricelistDetail[];
}
/**
 * @generated from protobuf message PricelistDetail
 */
export interface PricelistDetail {
    /**
     * @generated from protobuf field: int32 pt_id = 1;
     */
    ptId: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string pidd_oid = 3;
     */
    piddOid: string;
    /**
     * @generated from protobuf field: float price = 4;
     */
    price: number;
    /**
     * @generated from protobuf field: float discount = 5;
     */
    discount: number;
    /**
     * @generated from protobuf field: float dp = 6;
     */
    dp: number;
    /**
     * @generated from protobuf field: int32 min_qty = 7;
     */
    minQty: number;
    /**
     * @generated from protobuf field: int32 area_id = 8;
     */
    areaId: number;
    /**
     * @generated from protobuf field: string unit = 9;
     */
    unit: string;
}
/**
 * @generated from protobuf message NsoRequest
 */
export interface NsoRequest {
    /**
     * @generated from protobuf field: TheOrderReq sales_order = 1;
     */
    salesOrder?: TheOrderReq;
    /**
     * @generated from protobuf field: repeated OrderDetailReq sales_order_detail = 2;
     */
    salesOrderDetail: OrderDetailReq[];
}
/**
 * @generated from protobuf message TheOrderReq
 */
export interface TheOrderReq {
    /**
     * @generated from protobuf field: int32 so_dom_id = 1;
     */
    soDomId: number;
    /**
     * @generated from protobuf field: int32 so_en_id = 2;
     */
    soEnId: number;
    /**
     * @generated from protobuf field: string so_add_by = 3;
     */
    soAddBy: string;
    /**
     * @generated from protobuf field: int32 so_ptnr_id_sold = 4;
     */
    soPtnrIdSold: number;
    /**
     * @generated from protobuf field: string so_date = 5;
     */
    soDate: string;
    /**
     * @generated from protobuf field: int32 so_sales_person = 6;
     */
    soSalesPerson: number;
    /**
     * @generated from protobuf field: int32 so_pi_id = 7;
     */
    soPiId: number;
    /**
     * @generated from protobuf field: int32 so_pay_type = 8;
     */
    soPayType: number;
    /**
     * @generated from protobuf field: int32 so_pay_method = 9;
     */
    soPayMethod: number;
    /**
     * @generated from protobuf field: double so_disc_header = 10;
     */
    soDiscHeader: number;
    /**
     * @generated from protobuf field: double so_total = 11;
     */
    soTotal: number;
    /**
     * @generated from protobuf field: string so_trans_rmks = 12;
     */
    soTransRmks: string;
}
/**
 * @generated from protobuf message OrderDetailReq
 */
export interface OrderDetailReq {
    /**
     * @generated from protobuf field: int32 sod_pt_id = 1;
     */
    sodPtId: number;
    /**
     * @generated from protobuf field: int32 sod_qty = 2;
     */
    sodQty: number;
    /**
     * @generated from protobuf field: double sod_price = 3;
     */
    sodPrice: number;
    /**
     * @generated from protobuf field: double sod_disc = 4;
     */
    sodDisc: number;
    /**
     * @generated from protobuf field: optional int32 sod_loc_id = 5;
     */
    sodLocId?: number;
}
/**
 * @generated from protobuf message NsoResponse
 */
export interface NsoResponse {
    /**
     * @generated from protobuf field: string so_oid = 1;
     */
    soOid: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GpRequest$Type extends MessageType<GpRequest> {
    constructor() {
        super("GpRequest", [
            { no: 1, name: "en_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GpRequest>): GpRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpRequest): GpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 en_id */ 1:
                    message.enId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 en_id = 1; */
        if (message.enId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.enId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpRequest
 */
export const GpRequest = new GpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GpResponse$Type extends MessageType<GpResponse> {
    constructor() {
        super("GpResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PricelistType }
        ]);
    }
    create(value?: PartialMessage<GpResponse>): GpResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<GpResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpResponse): GpResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PricelistType data */ 1:
                    message.data.push(PricelistType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GpResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PricelistType data = 1; */
        for (let i = 0; i < message.data.length; i++)
            PricelistType.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpResponse
 */
export const GpResponse = new GpResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PricelistType$Type extends MessageType<PricelistType> {
    constructor() {
        super("PricelistType", [
            { no: 1, name: "pi_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "en_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pi_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pi_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pi_start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "pi_end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "pi_active", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "area_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "pi_oid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PricelistType>): PricelistType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.piId = 0;
        message.enId = 0;
        message.piCode = "";
        message.piDesc = "";
        message.piStartDate = "";
        message.piEndDate = "";
        message.piActive = "";
        message.areaId = 0;
        message.piOid = "";
        if (value !== undefined)
            reflectionMergePartial<PricelistType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PricelistType): PricelistType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pi_id */ 1:
                    message.piId = reader.int32();
                    break;
                case /* int32 en_id */ 2:
                    message.enId = reader.int32();
                    break;
                case /* string pi_code */ 3:
                    message.piCode = reader.string();
                    break;
                case /* string pi_desc */ 4:
                    message.piDesc = reader.string();
                    break;
                case /* string pi_start_date */ 5:
                    message.piStartDate = reader.string();
                    break;
                case /* string pi_end_date */ 6:
                    message.piEndDate = reader.string();
                    break;
                case /* string pi_active */ 7:
                    message.piActive = reader.string();
                    break;
                case /* int32 area_id */ 8:
                    message.areaId = reader.int32();
                    break;
                case /* string pi_oid */ 9:
                    message.piOid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PricelistType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 pi_id = 1; */
        if (message.piId !== 0)
            writer.tag(1, WireType.Varint).int32(message.piId);
        /* int32 en_id = 2; */
        if (message.enId !== 0)
            writer.tag(2, WireType.Varint).int32(message.enId);
        /* string pi_code = 3; */
        if (message.piCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.piCode);
        /* string pi_desc = 4; */
        if (message.piDesc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.piDesc);
        /* string pi_start_date = 5; */
        if (message.piStartDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.piStartDate);
        /* string pi_end_date = 6; */
        if (message.piEndDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.piEndDate);
        /* string pi_active = 7; */
        if (message.piActive !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.piActive);
        /* int32 area_id = 8; */
        if (message.areaId !== 0)
            writer.tag(8, WireType.Varint).int32(message.areaId);
        /* string pi_oid = 9; */
        if (message.piOid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.piOid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PricelistType
 */
export const PricelistType = new PricelistType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GpdRequest$Type extends MessageType<GpdRequest> {
    constructor() {
        super("GpdRequest", [
            { no: 1, name: "pi_oid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "en_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "payment_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "area_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GpdRequest>): GpdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.piOid = "";
        message.enId = 0;
        message.paymentType = 0;
        message.areaId = 0;
        if (value !== undefined)
            reflectionMergePartial<GpdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpdRequest): GpdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pi_oid */ 1:
                    message.piOid = reader.string();
                    break;
                case /* int32 en_id */ 2:
                    message.enId = reader.int32();
                    break;
                case /* int32 payment_type */ 3:
                    message.paymentType = reader.int32();
                    break;
                case /* int32 area_id */ 4:
                    message.areaId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GpdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pi_oid = 1; */
        if (message.piOid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.piOid);
        /* int32 en_id = 2; */
        if (message.enId !== 0)
            writer.tag(2, WireType.Varint).int32(message.enId);
        /* int32 payment_type = 3; */
        if (message.paymentType !== 0)
            writer.tag(3, WireType.Varint).int32(message.paymentType);
        /* int32 area_id = 4; */
        if (message.areaId !== 0)
            writer.tag(4, WireType.Varint).int32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpdRequest
 */
export const GpdRequest = new GpdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GpdResponse$Type extends MessageType<GpdResponse> {
    constructor() {
        super("GpdResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PricelistDetail }
        ]);
    }
    create(value?: PartialMessage<GpdResponse>): GpdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<GpdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpdResponse): GpdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PricelistDetail data */ 1:
                    message.data.push(PricelistDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GpdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PricelistDetail data = 1; */
        for (let i = 0; i < message.data.length; i++)
            PricelistDetail.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpdResponse
 */
export const GpdResponse = new GpdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PricelistDetail$Type extends MessageType<PricelistDetail> {
    constructor() {
        super("PricelistDetail", [
            { no: 1, name: "pt_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pidd_oid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "discount", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "dp", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "min_qty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "area_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PricelistDetail>): PricelistDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ptId = 0;
        message.title = "";
        message.piddOid = "";
        message.price = 0;
        message.discount = 0;
        message.dp = 0;
        message.minQty = 0;
        message.areaId = 0;
        message.unit = "";
        if (value !== undefined)
            reflectionMergePartial<PricelistDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PricelistDetail): PricelistDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pt_id */ 1:
                    message.ptId = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string pidd_oid */ 3:
                    message.piddOid = reader.string();
                    break;
                case /* float price */ 4:
                    message.price = reader.float();
                    break;
                case /* float discount */ 5:
                    message.discount = reader.float();
                    break;
                case /* float dp */ 6:
                    message.dp = reader.float();
                    break;
                case /* int32 min_qty */ 7:
                    message.minQty = reader.int32();
                    break;
                case /* int32 area_id */ 8:
                    message.areaId = reader.int32();
                    break;
                case /* string unit */ 9:
                    message.unit = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PricelistDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 pt_id = 1; */
        if (message.ptId !== 0)
            writer.tag(1, WireType.Varint).int32(message.ptId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string pidd_oid = 3; */
        if (message.piddOid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.piddOid);
        /* float price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit32).float(message.price);
        /* float discount = 5; */
        if (message.discount !== 0)
            writer.tag(5, WireType.Bit32).float(message.discount);
        /* float dp = 6; */
        if (message.dp !== 0)
            writer.tag(6, WireType.Bit32).float(message.dp);
        /* int32 min_qty = 7; */
        if (message.minQty !== 0)
            writer.tag(7, WireType.Varint).int32(message.minQty);
        /* int32 area_id = 8; */
        if (message.areaId !== 0)
            writer.tag(8, WireType.Varint).int32(message.areaId);
        /* string unit = 9; */
        if (message.unit !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.unit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PricelistDetail
 */
export const PricelistDetail = new PricelistDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NsoRequest$Type extends MessageType<NsoRequest> {
    constructor() {
        super("NsoRequest", [
            { no: 1, name: "sales_order", kind: "message", T: () => TheOrderReq },
            { no: 2, name: "sales_order_detail", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderDetailReq }
        ]);
    }
    create(value?: PartialMessage<NsoRequest>): NsoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.salesOrderDetail = [];
        if (value !== undefined)
            reflectionMergePartial<NsoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NsoRequest): NsoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TheOrderReq sales_order */ 1:
                    message.salesOrder = TheOrderReq.internalBinaryRead(reader, reader.uint32(), options, message.salesOrder);
                    break;
                case /* repeated OrderDetailReq sales_order_detail */ 2:
                    message.salesOrderDetail.push(OrderDetailReq.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NsoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TheOrderReq sales_order = 1; */
        if (message.salesOrder)
            TheOrderReq.internalBinaryWrite(message.salesOrder, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated OrderDetailReq sales_order_detail = 2; */
        for (let i = 0; i < message.salesOrderDetail.length; i++)
            OrderDetailReq.internalBinaryWrite(message.salesOrderDetail[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NsoRequest
 */
export const NsoRequest = new NsoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TheOrderReq$Type extends MessageType<TheOrderReq> {
    constructor() {
        super("TheOrderReq", [
            { no: 1, name: "so_dom_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "so_en_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "so_add_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "so_ptnr_id_sold", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "so_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "so_sales_person", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "so_pi_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "so_pay_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "so_pay_method", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "so_disc_header", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "so_total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "so_trans_rmks", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TheOrderReq>): TheOrderReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.soDomId = 0;
        message.soEnId = 0;
        message.soAddBy = "";
        message.soPtnrIdSold = 0;
        message.soDate = "";
        message.soSalesPerson = 0;
        message.soPiId = 0;
        message.soPayType = 0;
        message.soPayMethod = 0;
        message.soDiscHeader = 0;
        message.soTotal = 0;
        message.soTransRmks = "";
        if (value !== undefined)
            reflectionMergePartial<TheOrderReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TheOrderReq): TheOrderReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 so_dom_id */ 1:
                    message.soDomId = reader.int32();
                    break;
                case /* int32 so_en_id */ 2:
                    message.soEnId = reader.int32();
                    break;
                case /* string so_add_by */ 3:
                    message.soAddBy = reader.string();
                    break;
                case /* int32 so_ptnr_id_sold */ 4:
                    message.soPtnrIdSold = reader.int32();
                    break;
                case /* string so_date */ 5:
                    message.soDate = reader.string();
                    break;
                case /* int32 so_sales_person */ 6:
                    message.soSalesPerson = reader.int32();
                    break;
                case /* int32 so_pi_id */ 7:
                    message.soPiId = reader.int32();
                    break;
                case /* int32 so_pay_type */ 8:
                    message.soPayType = reader.int32();
                    break;
                case /* int32 so_pay_method */ 9:
                    message.soPayMethod = reader.int32();
                    break;
                case /* double so_disc_header */ 10:
                    message.soDiscHeader = reader.double();
                    break;
                case /* double so_total */ 11:
                    message.soTotal = reader.double();
                    break;
                case /* string so_trans_rmks */ 12:
                    message.soTransRmks = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TheOrderReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 so_dom_id = 1; */
        if (message.soDomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.soDomId);
        /* int32 so_en_id = 2; */
        if (message.soEnId !== 0)
            writer.tag(2, WireType.Varint).int32(message.soEnId);
        /* string so_add_by = 3; */
        if (message.soAddBy !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.soAddBy);
        /* int32 so_ptnr_id_sold = 4; */
        if (message.soPtnrIdSold !== 0)
            writer.tag(4, WireType.Varint).int32(message.soPtnrIdSold);
        /* string so_date = 5; */
        if (message.soDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.soDate);
        /* int32 so_sales_person = 6; */
        if (message.soSalesPerson !== 0)
            writer.tag(6, WireType.Varint).int32(message.soSalesPerson);
        /* int32 so_pi_id = 7; */
        if (message.soPiId !== 0)
            writer.tag(7, WireType.Varint).int32(message.soPiId);
        /* int32 so_pay_type = 8; */
        if (message.soPayType !== 0)
            writer.tag(8, WireType.Varint).int32(message.soPayType);
        /* int32 so_pay_method = 9; */
        if (message.soPayMethod !== 0)
            writer.tag(9, WireType.Varint).int32(message.soPayMethod);
        /* double so_disc_header = 10; */
        if (message.soDiscHeader !== 0)
            writer.tag(10, WireType.Bit64).double(message.soDiscHeader);
        /* double so_total = 11; */
        if (message.soTotal !== 0)
            writer.tag(11, WireType.Bit64).double(message.soTotal);
        /* string so_trans_rmks = 12; */
        if (message.soTransRmks !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.soTransRmks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TheOrderReq
 */
export const TheOrderReq = new TheOrderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderDetailReq$Type extends MessageType<OrderDetailReq> {
    constructor() {
        super("OrderDetailReq", [
            { no: 1, name: "sod_pt_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "sod_qty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sod_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "sod_disc", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "sod_loc_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OrderDetailReq>): OrderDetailReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sodPtId = 0;
        message.sodQty = 0;
        message.sodPrice = 0;
        message.sodDisc = 0;
        if (value !== undefined)
            reflectionMergePartial<OrderDetailReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderDetailReq): OrderDetailReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 sod_pt_id */ 1:
                    message.sodPtId = reader.int32();
                    break;
                case /* int32 sod_qty */ 2:
                    message.sodQty = reader.int32();
                    break;
                case /* double sod_price */ 3:
                    message.sodPrice = reader.double();
                    break;
                case /* double sod_disc */ 4:
                    message.sodDisc = reader.double();
                    break;
                case /* optional int32 sod_loc_id */ 5:
                    message.sodLocId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderDetailReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 sod_pt_id = 1; */
        if (message.sodPtId !== 0)
            writer.tag(1, WireType.Varint).int32(message.sodPtId);
        /* int32 sod_qty = 2; */
        if (message.sodQty !== 0)
            writer.tag(2, WireType.Varint).int32(message.sodQty);
        /* double sod_price = 3; */
        if (message.sodPrice !== 0)
            writer.tag(3, WireType.Bit64).double(message.sodPrice);
        /* double sod_disc = 4; */
        if (message.sodDisc !== 0)
            writer.tag(4, WireType.Bit64).double(message.sodDisc);
        /* optional int32 sod_loc_id = 5; */
        if (message.sodLocId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.sodLocId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderDetailReq
 */
export const OrderDetailReq = new OrderDetailReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NsoResponse$Type extends MessageType<NsoResponse> {
    constructor() {
        super("NsoResponse", [
            { no: 1, name: "so_oid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NsoResponse>): NsoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.soOid = "";
        if (value !== undefined)
            reflectionMergePartial<NsoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NsoResponse): NsoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string so_oid */ 1:
                    message.soOid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NsoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string so_oid = 1; */
        if (message.soOid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.soOid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NsoResponse
 */
export const NsoResponse = new NsoResponse$Type();
/**
 * @generated ServiceType for protobuf service SalesOrder
 */
export const SalesOrder = new ServiceType("SalesOrder", [
    { name: "GetPricelist", options: {}, I: GpRequest, O: GpResponse },
    { name: "GetPricelistDetail", options: {}, I: GpdRequest, O: GpdResponse },
    { name: "NewOrder", options: {}, I: NsoRequest, O: NsoResponse }
]);
